name: Build and Deploy

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  id-token: write
  contents: write

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: laravel-app
  EKS_CLUSTER_NAME: my-cluster
  HELM_CHART_PATH: ./helm/laravel-app

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Bump version and push tag
        id: semver
        uses: anothrNick/github-tag-action@1.67.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          WITH_V: true
          DEFAULT_BUMP: patch
          RELEASE_BRANCHES: main
          MAJOR_STRING_TOKEN: "BREAKING CHANGE:"
          MINOR_STRING_TOKEN: "feat:"
          PATCH_STRING_TOKEN: "fix:"

      # This code need actual AWS credentials and EKS to work, so it's commented out for now.

      # - name: Configure AWS credentials
      #   uses: aws-actions/configure-aws-credentials@v4
      #   with:
      #     role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
      #     aws-region: ${{ env.AWS_REGION }}

      # - name: Login to Amazon ECR
      #   id: login-ecr
      #   uses: aws-actions/amazon-ecr-login@v2

      # - name: Set up Docker Buildx
      #   uses: docker/setup-buildx-action@v3

      # - name: Build and push
      #   uses: docker/build-push-action@v6
      #   with:
      #     context: .
      #     push: true
      #     tags: ${{ steps.meta.outputs.tags }}
      #     labels: ${{ steps.meta.outputs.labels }}
      #     cache-from: type=gha
      #     cache-to: type=gha,mode=max

      # - name: Update kubeconfig
      #   run: aws eks update-kubeconfig --name ${{ env.EKS_CLUSTER_NAME }} --region ${{ env.AWS_REGION }}

      # - name: Set up Helm
      #   uses: azure/setup-helm@v3
      #   with:
      #     version: 'latest'

      # - name: Deploy to EKS with Helm
      #   run: |
      #     IMAGE_TAG=$(echo ${{ steps.meta.outputs.tags }} | cut -d',' -f1)
      #     helm upgrade --install laravel-app ${{ env.HELM_CHART_PATH }} \
      #       --set image.repository=$(echo $IMAGE_TAG | cut -d':' -f1) \
      #       --set image.tag=$(echo $IMAGE_TAG | cut -d':' -f2) \
      #       --wait --timeout 5m
